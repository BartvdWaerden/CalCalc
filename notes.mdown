# Scope Set of rules for storing and finding variables.

# Compiler Theory

## Tokenizing/Lexing Breaking up a string of characters into meningfull (to the
language) chunks, called tokens.

## Parsing Taking a stream (array) of tokens and turning it into a tree of
nested elements, wich collectively represent the grammatical structure of the
program (Abstract Syntax Tree 'AST').

## Code generation The process of taking an AST and turning it into executable
code.

## Summary First Compiler declares a variable (if not previously declared) in
the current Scope, and second, when executing, Engine looks up the variable in
Sccope and assigns to it, if found.

# LHS vs RHS

## LHS Assign a value. Find a variable container and try to assign some value to
it.

## RHS Look up/execute of the value of some variable. "Retrieve his/her source
value" or "go get the value of...".

# Look ups / Shadowing Scope look-up stops once it finds the first match. The
same identifier name can be specified at multiple layers of nested scope, which
is called 'shadowing' (the ineer identifier 'shadows' the outer identifier).
Regardless of 'shadowing', scope look-up always starts at the innermost scope
being executed at the time, and woks its way outward/upward until the first
match, and stops.


# This & Object Prototypes

## Chapter 1 - this All makes Sense Now
The ``this`` keyword is a special identifier keyword that's automatically defined in the scope of every function.

The ``this`` mechanism provides a more elegant way of implicitly "passing along" an object reference, leading to cleaner API design and easier reuse.

This is actually a binding that is made when a function is invoked, and "what" it references is determined entirely by the call-site where the function is called.

## Chapter 2 - this All makes Sense Now!

• **Call-site**: The location in code where a function is called (not where it's declared)
• **Call-stack**: The stack of functions that haven been called to get us to the current moment in execution
